// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a6DipB8QpCpKA67GUeQ1zH
// Component: 915czgUntfeX

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LinkButton from "../../LinkButton"; // plasmic-import: 0DcRn4RWBefW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a6DipB8QpCpKA67GUeQ1zH/projectcss
import sty from "./PlasmicProductCarousel.module.css"; // plasmic-import: 915czgUntfeX/css

import DotCircleOIcon from "./icons/PlasmicIcon__DotCircleO"; // plasmic-import: jIJyVwK188Kp/icon
import CircleOIcon from "./icons/PlasmicIcon__CircleO"; // plasmic-import: J8oZz8WkkHsh/icon
import slider1Mf91USDVzTe from "./images/slider1.png"; // plasmic-import: Mf91uS-dVzTE/picture
import slider2ZeKxY9V661Oc from "./images/slider2.png"; // plasmic-import: ZEKxY9V661oc/picture
import slider33CgAyYzWOb6U from "./images/slider3.png"; // plasmic-import: 3cgAYYzWOb6u/picture

createPlasmicElementProxy;

export type PlasmicProductCarousel__VariantMembers = {
  slider: "first" | "second" | "third";
};
export type PlasmicProductCarousel__VariantsArgs = {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
};
type VariantPropType = keyof PlasmicProductCarousel__VariantsArgs;
export const PlasmicProductCarousel__VariantProps = new Array<VariantPropType>(
  "slider"
);

export type PlasmicProductCarousel__ArgsType = {};
type ArgPropType = keyof PlasmicProductCarousel__ArgsType;
export const PlasmicProductCarousel__ArgProps = new Array<ArgPropType>();

export type PlasmicProductCarousel__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultProductCarouselProps {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
  className?: string;
}

const $$ = {};

function PlasmicProductCarousel__RenderFunc(props: {
  variants: PlasmicProductCarousel__VariantsArgs;
  args: PlasmicProductCarousel__ArgsType;
  overrides: PlasmicProductCarousel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slider",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slider
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vG46Q)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__s6NIk, {
            [sty.freeBoxslider_second__s6NIkgoDAk]: hasVariant(
              $state,
              "slider",
              "second"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xWx4F
            )}
          >
            {"Great Design Collection"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ozMo,
              {
                [sty.textslider_first__ozMovGcln]: hasVariant(
                  $state,
                  "slider",
                  "first"
                ),
                [sty.textslider_second__ozMogoDAk]: hasVariant(
                  $state,
                  "slider",
                  "second"
                ),
                [sty.textslider_third__ozMolEs5O]: hasVariant(
                  $state,
                  "slider",
                  "third"
                )
              }
            )}
          >
            {hasVariant($state, "slider", "third")
              ? "Valvet Accent Arm Chair"
              : hasVariant($state, "slider", "second")
              ? "Mapple Wood Accent Chair"
              : "Cloth Covered Accent Chair"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rMoF
            )}
          >
            {
              "Lorem ipsum dolor sit amet consectetur adipisicing elit nemo expedita voluptas culpa sapiente."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__b0ItZ)}>
            <div className={classNames(projectcss.all, sty.freeBox__mcSyJ)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4W94N,
                {
                  [sty.textslider_second___4W94NgoDAk]: hasVariant(
                    $state,
                    "slider",
                    "second"
                  ),
                  [sty.textslider_third___4W94NlEs5O]: hasVariant(
                    $state,
                    "slider",
                    "third"
                  )
                }
              )}
            >
              {hasVariant($state, "slider", "third")
                ? " $299.00"
                : hasVariant($state, "slider", "second")
                ? " $199.00"
                : " $399.00"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cPkFp,
                {
                  [sty.textslider_first__cPkFpvGcln]: hasVariant(
                    $state,
                    "slider",
                    "first"
                  ),
                  [sty.textslider_second__cPkFpgoDAk]: hasVariant(
                    $state,
                    "slider",
                    "second"
                  ),
                  [sty.textslider_third__cPkFplEs5O]: hasVariant(
                    $state,
                    "slider",
                    "third"
                  )
                }
              )}
            >
              {hasVariant($state, "slider", "third")
                ? " $399.00"
                : hasVariant($state, "slider", "second")
                ? " $299.00"
                : " $499.00"}
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w18Mt)}
          >
            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__xh6P4)}
              text={"\u2295 Add to cart"}
              type={"solidOrange"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__wd893)}
              text={"More Info"}
              type={"blankOrange"}
            />
          </Stack__>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__nLkeZ)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgslider_first]: hasVariant($state, "slider", "first"),
              [sty.imgslider_second]: hasVariant($state, "slider", "second"),
              [sty.imgslider_third]: hasVariant($state, "slider", "third")
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={
              hasVariant($state, "slider", "third")
                ? {
                    src: slider33CgAyYzWOb6U,
                    fullWidth: 553,
                    fullHeight: 475,
                    aspectRatio: undefined
                  }
                : hasVariant($state, "slider", "second")
                ? {
                    src: slider2ZeKxY9V661Oc,
                    fullWidth: 528,
                    fullHeight: 559,
                    aspectRatio: undefined
                  }
                : {
                    src: slider1Mf91USDVzTe,
                    fullWidth: 507,
                    fullHeight: 549,
                    aspectRatio: undefined
                  }
            }
          />
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oPlHt)}
      >
        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "slider", "third")
              ? CircleOIcon
              : hasVariant($state, "slider", "second")
              ? CircleOIcon
              : DotCircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__xuVCg, {
            [sty.svgslider_second__xuVCggoDAk]: hasVariant(
              $state,
              "slider",
              "second"
            ),
            [sty.svgslider_third__xuVCglEs5O]: hasVariant(
              $state,
              "slider",
              "third"
            )
          })}
          role={"img"}
        />

        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "slider", "second")
              ? DotCircleOIcon
              : CircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__iNjod, {
            [sty.svgslider_first__iNjoDvGcln]: hasVariant(
              $state,
              "slider",
              "first"
            ),
            [sty.svgslider_second__iNjoDgoDAk]: hasVariant(
              $state,
              "slider",
              "second"
            ),
            [sty.svgslider_third__iNjoDlEs5O]: hasVariant(
              $state,
              "slider",
              "third"
            )
          })}
          role={"img"}
        />

        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "slider", "third") ? DotCircleOIcon : CircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__nGAqO, {
            [sty.svgslider_third__nGAqOlEs5O]: hasVariant(
              $state,
              "slider",
              "third"
            )
          })}
          role={"img"}
        />
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCarousel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCarousel__VariantsArgs;
    args?: PlasmicProductCarousel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCarousel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCarousel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCarousel__ArgProps,
          internalVariantPropNames: PlasmicProductCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCarousel";
  } else {
    func.displayName = `PlasmicProductCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCarousel = Object.assign(
  // Top-level PlasmicProductCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicProductCarousel
    internalVariantProps: PlasmicProductCarousel__VariantProps,
    internalArgProps: PlasmicProductCarousel__ArgProps
  }
);

export default PlasmicProductCarousel;
/* prettier-ignore-end */
